import random
import time


class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key


def insert(root, key):
    if root is None:
        return Node(key)
    if key < root.val:
        root.left = insert(root.left, key)
    else:
        root.right = insert(root.right, key)
    return root


def print_tree(root, level=0, prefix=""):
    if root is not None:
        print(" " * (level * 4) + prefix + str(root.val))
        if root.left or root.right:
            if root.left:
                print_tree(root.left, level + 1, "|-- ")
            else:
                print(" " * ((level + 1) * 4) + "|-- None")
            if root.right:
                print_tree(root.right, level + 1, "|-- ")
            else:
                print(" " * ((level + 1) * 4) + "|-- None")


def interactive_search(root, key):
    steps = []
    start_time = time.time()
    current = root
    while current is not None:
        steps.append(f"–¢–µ–∫—É—â–∞—è –Ω–æ–¥–∞: {current.val}")
        if key == current.val:
            steps.append(f"üéâ –ù–∞–π–¥–µ–Ω–æ {key}!")
            break
        elif key < current.val:
            steps.append(f"{key} < {current.val} ‚Üí –∏–¥—ë–º –≤–ª–µ–≤–æ")
            current = current.left
        else:
            steps.append(f"{key} > {current.val} ‚Üí –∏–¥—ë–º –≤–ø—Ä–∞–≤–æ")
            current = current.right
    end_time = time.time()
    return steps, end_time - start_time


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
random.seed(42)
values = random.sample(range(1, 50), 10)  # 10 —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 50
root = None
for v in values:
    root = insert(root, v)

# –í—ã–≤–æ–¥ –¥–µ—Ä–µ–≤–∞
print("üå≥ –î–µ—Ä–µ–≤–æ:")
print_tree(root)

# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
try:
    target = int(input("\nüîç –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: "))
except ValueError:
    print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    exit()

# –ü–æ–∏—Å–∫ —Å –≤—ã–≤–æ–¥–æ–º —à–∞–≥–æ–≤
print("\nüîé –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞:")
steps, time_taken = interactive_search(root, target)
print("\n".join(steps))
print(f"\n‚è± –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {time_taken:.6f} —Å–µ–∫.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
if f"–ù–∞–π–¥–µ–Ω–æ {target}!" not in "\n".join(steps):
    print(f"‚ùå –ß–∏—Å–ª–æ {target} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–µ—Ä–µ–≤–µ.")
