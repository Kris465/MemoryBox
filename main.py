import asyncio
import os

from aiogram import Bot, Dispatcher
from loguru import logger
from dotenv import load_dotenv, find_dotenv

from checker import Checker

load_dotenv(find_dotenv())
TOKEN = os.getenv('TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
bot = Bot(token=TOKEN)
dp = Dispatcher()
checker = Checker(link="https://sleepytranslations.com/series/please-be-quiet-and-take-off-your-something/chapter-1/")


async def send_check_results():
    try:
        results = checker.parse()

        if results:
            message_text = "üîî –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n" + "\n".join(str(item) for item in results)
            await bot.send_message(chat_id=CHANNEL_ID, text=message_text)
            logger.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª")
        else:
            await bot.send_message(chat_id=CHANNEL_ID, text="‚Ñπ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            logger.info("–ù–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}"
        await bot.send_message(chat_id=CHANNEL_ID, text=error_msg)
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


async def main():
    logger.add("file.log",
               format="{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}",
               rotation="3 days",
               backtrace=True,
               diagnose=True)

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")

    asyncio.create_task(periodic_check(interval=3600))

    await dp.start_polling(bot)


async def periodic_check(interval: int):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    while True:
        await send_check_results()
        await asyncio.sleep(interval)


if __name__ == '__main__':
    asyncio.run(main())
